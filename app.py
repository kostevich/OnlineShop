#!/usr/bin/env python

#==========================================================================================#
# >>>>> ПОДКЛЮЧЕНИЕ БИБЛИОТЕК И МОДУЛЕЙ <<<<< #
#==========================================================================================#

from cloudipsp import Api, Checkout
from dublib.Methods import ReadJSON, CheckPythonMinimalVersion
from flask import Flask
from flask import redirect
from flask import render_template
from flask import request
from flask_sqlalchemy import SQLAlchemy

#==========================================================================================#
# >>>>> ЧТЕНИЕ НАСТРОЕК <<<<< #
#==========================================================================================#

# Проверка поддержки используемой версии Python.
CheckPythonMinimalVersion(3, 11)

Settings = ReadJSON("Settings.json")

# Создадим объект класса Flask с именем файла.
app = Flask(__name__)

# Создадим базу данных, обращаясь к объекту app и устанавливая ему настройки.
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///shop.db'

# База данных принадлежит приложению app.
db = SQLAlchemy(app)

# Создание контекста приложения.
with app.app_context():
    # Создание бд.
    db.create_all()

#==========================================================================================#
# >>>>> СОЗДАНИЕ ПОЛЕЙ ТАБЛИЦЫ СТАТЕЙ <<<<< #
#==========================================================================================# 

# Создадим класс, на основе которого, будет создаваться поля таблицы.
class Item(db.Model):
    id= db.Column(db.Integer, primary_key = True)
    title = db.Column(db.String(100), nullable = False)
    price = db.Column(db.Integer, nullable = False)
    active = db.Column(db.Boolean, default = True)
    description = db.Column(db.Text, nullable = False)
    
    # Получение данных объекта базы данных в виде строки.
    def __repr__(self):
        # Возвращаем поле title класса Item в текстовом виде.
        return self.title

#==========================================================================================#
# >>>>> ГЛАВНАЯ СТРАНИЦА САЙТА <<<<< #
#==========================================================================================# 

# Начало работы функции mainpage при переходе по ссылке.
@app.route('/')
# Функция, выводящая на страницу данные шаблона html.
def mainpage():
    # Сохраняем объект, в котором находится данные выбранной статьи.
    items = Item.query.order_by(Item.price).all()
    # Возвращение шаблон html на страницу.
    return render_template('MainPage.html', items = items) 

#==========================================================================================#
# >>>>> СТРАНИЦА ОПЛАТЫ <<<<< #
#==========================================================================================# 

# Начало работы функции buy_product при переходе по ссылке.
@app.route('/BuyProduct/<int:id>')
# Функция, выводящая на страницу страницу оплаты.
def buy_product(id):
    # Сохраняем объект, в котором находится данные выбранного товара.
    item = Item.query.get(id)

    # Передаем объекту класса Api данные продавца и секретный ключ.
    api = Api(merchant_id=Settings["merchant_id"],
          secret_key=Settings["secret_key"])
    
    # Создаем объект класса Checkout и передаем туда данные продавца.
    checkout = Checkout(api=api)

    # Cохраняем словарь с ценой выбранного товара и валютой.
    data = {
    "currency": "BYN",
    "amount": str(item.price)+"00"}

    # Формируем ссылку с оплатой товара.
    url = checkout.url(data).get('checkout_url')

    # Переадресация на страницу оплаты.
    return redirect(url)

#==========================================================================================#
# >>>>> ДОБАВЛЕНИЕ НОВОГО ТОВАРА <<<<< #
#==========================================================================================# 

# Начало работы функции create_product при переходе по ссылке.
@app.route('/CreateProduct', methods = ['POST', 'GET'])
# Функция, выводящая на страницу данные шаблона html.
def create_product():
    # Если пришел запрос с методом POST. 
    if request.method == 'POST':
        # Сохраняем в переменную значение из поля формы.
        title = request.form['title']
        price = request.form['price']
        description = request.form['description']

        # Сохраняем объект класса Item с данными из переменных, записанных в нужные поля.
        item = Item(title=title, price=price, description=description)

        # Попробуем добавить значения в базу данных.
        try:
            # Добавление объекта класса Item в сессию.
            db.session.add(item)

            # Сохранение в базе данных.
            db.session.commit()

            # Переадресация на страницу со всеми статьями.
            return redirect('/')
        
        # Исключение.
        except:
            # Возвращаем ошибку: "Не удалось добавить статью".
            return "Не удалось добавить статью."
    # Если пришел GET-запрос.
    else:
        # Возвращение шаблон html на страницу.
        return render_template('CreateProduct.html') 

#==========================================================================================#
# >>>>> ИНИЦИАЛИЗАЦИЯ СКРИПТА <<<<< #
#==========================================================================================#

# Если имя такое же как название этого файла.
if __name__=='__main__':
    # То запускаем приложение flask, в режиме исправления ошибок.
    app.run(debug=True)